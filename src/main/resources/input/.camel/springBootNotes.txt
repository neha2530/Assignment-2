SpringBoot Starter Annotation
spring-boot-starter
spring-boot-starter-logging
spring-boot-starter-test
spring-boot-starter-data-rest
spring-boot-starter-web-services
spring-boot-starter-web
spring-boot-starter-tomcat
spring-boot-starter-data-jpa
spring-boot-starter-security
spring-boot-starter-mail
spring-boot-starter-actuator


@GetMapping(path = "/{id}", produces = MediaType.APPLICATION_XML_VALUE)

----------------Spring Boot-------------------------
Spring Boot is basically an extension of the Spring framework.
The main goal of Spring Boot is to quickly create Spring-based applications without 
requiring developers to write the same boilerplate configuration again and again.
Key Features:-
Spring Boot starters
Spring Boot autoconfiguration
Spring Boot Annotation
Spring Boot Actuator
Easy-to-use embedded servlet container support

1-@SpringBootApplication equivalent to three annotation 
                     a- @EnableAutoConfiguration
                     b- @ComponentScan
                     c- @Configuration			
					 
@EnableAutoConfigration- supposed i have added a dependency of mysql in pom.xml
then this annotation helps us to enable all configurtion for the mysql automatically

You can use @ComponentScan without arguments to scan the current package and all its
sub-packages. In fact @ComponentScan along with @Configuration annotation is used to
specify the packages that we want to be scanned. 

2- @Configuration
@Configuration : allow to register extra beans in the context or import additional configuration classes.
@Configuration is a class-level annotation indicating that an object is a source of 
bean definitions. @Configuration classes declare beans through @Bean -annotated methods.
Calls to @Bean methods on @Configuration classes can also be used to define inter-bean dependencies.


--------------------Beans Scope----------------
3-@Bean
What is the use of @bean in Spring boot?
Spring @Bean Annotation is applied on a method to specify that it returns a bean to be 
managed by Spring context.
this is method level annotation 
The annotation supports most of the attributes offered by <bean/> , 
such as: init-method , destroy-method , autowiring , lazy-init , dependency-check , 
depends-on and scope .


Scope:---------
The scope of a bean defines the life cycle and visibility of that bean in the contexts we use it.

singleton
prototype
request
session
application
websocket

request, session, application and websocket, are only available in a web-aware application.


Singelton:-
When we define a bean with the singleton scope, the container creates a single instance of 
that bean; all requests for that bean name will return the same object, which is cached. 
Any modifications to the object will be reflected in all references to the bean. 
This scope is the default value if no other scope is specified.

@Scope("singleton")

Prototype:-
A bean with the prototype scope will return a different instance every time it is requested 
from the container. It is defined by setting the value prototype to the @Scope annotation in 
the bean definition:
@Scope("prototype")




-------------------------------------------------------
4- @Autowired
Spring @Autowired annotation is used for automatic dependency injection.


5-@Component
            a- @Controller
			b- @Service
			c- @Repository
            
@Component is a class-level annotation, 
@Component is an annotation that allows Spring to detect our custom beans automatically. 



6- @ComponentScan (Class level)
You can use @ComponentScan without arguments to scan the current package and all its
sub-packages. In fact @ComponentScan along with @Configuration annotation is used to
specify the packages that we want to be scanned. Like mentioned before

7-@Qualifier-to differentiate a bean among the same type of bean objects.

8- @Lazy

10-@RequestBody

Response Entity:- - ResponseEntity represents the whole HTTP response: status code, 
headers, and body. As a result, we can use it to fully configure the HTTP response.

Response Body - tells a controller that the object returned is automatically 
serialized into JSON and passed back into the HttpResponse object

11- @RestController
Simply returns object and object data is directly written in HTTP response as JSON or XML
@Controller + @ResponseBody
@RestController is a Spring Boot annotation used to create RESTful web services.





@Controller
Map of the object model to view or template and make it human readable

12- @PathVaraible

13- @RequestParam


@RequestMapping is a Spring Boot annotation used to map a URL request to a controller method.



----------------------------------------------------------------
What is difference between an embeded container and a war?

Ans- the main difference between an embeded container and a war is that you
can run spring boot application  as a jar from the commond prompt without setting
up a web server

But in case of war, you need to first setup a web server container and then you need 
to deploy war there


what is the use of profiles in spring boot ?
Ans- Spring has the provision of profiles to keep the seperate configurtion of  
environment 


---------------------Actuator-------------------------------
What is spring actuator? what is advantages?
Ans- Provides special feature to monitor and manage your application when you 
push into on production, we can use spring security to secure spring actuator 
boot end point  


How to get the list of all the beans in your Spring boot application?
Ans- Spring boot actuator "/beans" is used to get the list of all the spring
beans in your application


management.endpoints.web.exposure.include=*


"/env" returns the list of all the environment properties of running the spring
boot application

/beans
/cache
/env
/loggers
/mapping
/shutdown



-----------Dependency Injection------------------
Dependency Injection is a fundamental aspect of the Spring framework,
through which the Spring container “injects” objects into other objects or 
 “dependencies”.

Simply put, this allows for loose coupling of components and moves the 
responsibility of managing components onto the container.


-----------Interceptor--------------------------
Interceptor uses the annotated class @Component, and it implements the 
interface HandlerInterceptor.
The interface contains 3 main methods, which are:
1-preHandle() Method 
2-postHandle() Method---It allows the manipulation of the ModelAndView 
Object before users render it.
3-afterCompletion() Method---the afterCompletion() method is used when 
the entire request gets completed.

-------Why do we need a spring-boot-maven plugin?--------
It collects all the jars on the classpath and builds a single, runnable 
"über-jar", which makes it more 
convenient to execute and transport your service.
It searches for the public static void main() method to flag as a runnable class.
It provides a built-in dependency resolver that sets the version number to match 
Spring Boot dependencies. 
You can override any version you wish, but it will default to Boot’s chosen set 
of versions.

The Spring Boot Plugin has the following goals.
spring-boot:run runs your Spring Boot application.
spring-boot:repackage repackages your jar/war to be executable.
spring-boot:start and spring-boot:stop to manage the lifecycle of your 
Spring Boot application (i.e. for integration tests).
spring-boot:build-info generates build information that can be used by the Actuator.


------------Q16. How to generate a WAR file with Spring Boot?-------
1-Change the packaging type.---<packaging>war</packaging>
2- Add spring-boot-starter-tomcat as the provided scope
3- Spring Boot Application or Main class extends SpringBootServletInitializer


-------------Cascading-------------------------------------------------
When we perform some action on the target entity, the same action will 
be applied to the associated entity.

JPA Cascade Type:-
ALL
PERSIST
MERGE
REMOVE
REFRESH
DETACH 


-----------------------------Transaction annotation----------------------------------------
if a user has entered his information the user’s information gets stored in the user_info table. 
Now, to book a ticket he does an online payment and due to some reason(system failure) the payment 
has been canceled so, the ticket is not booked for him. But, the problem is that his information 
gets stored on the user_info table. On a large scale, more than thousands of these things happen 
within a single day. So, it is not good practice to store a single action of the transaction
(Here, only user info is stored not the payment info).

To overcome these problems, spring provides transaction management, which uses annotation to handle 
these issues. In such a scenario, spring stores the user information in temporary memory and then checks 
for payment information if the payment is successful then it will complete the transaction otherwise 
it will roll back the transaction and the user information does not gets stored in the database.





-----------------------------Transient annotation----------------------------------------
When persisting Java objects into database records using an Object-Relational Mapping (ORM) 
framework, we often want to ignore certain fields. If the framework is compliant with the Java 
Persistence API (JPA), we can add the @Transient annotation to these fields.

In other words, the transient keyword has the same effect as the @Transient annotation when 
saving to a database.However, the @Transient annotation does not affect Java object serialization.

------------------------------Docker---------------------------------------------------
Docker is a software platform that allows you to build, test, and deploy applications quickly. 
Docker packages software into standardized units called containers that have everything the 
software needs to run including libraries, system tools, code, and runtime. Using Docker,
you can quickly deploy and scale applications into any environment and know your code will run


-----------------------------KAFKA----------------------------------------------------
The Spring for Apache Kafka (spring-kafka) project applies core Spring concepts to the development
of Kafka-based messaging solutions. It provides a "template" as a high-level abstraction for sending
messages. It also provides support for Message-driven POJOs with @KafkaListener annotations and a "listener container".

----------------------------Kafka vs RabbitMq-------------------------------------------
Performance:-
RabbitMQ :- 4K-10K messages per second
Kafka:-1 million messages per second

Message Retention:-
RabbitMQ :- Acknowledgment based
Kafka:-Policy-based (e.g., 30 days)

Data Type:-
RabbitMQ :- Transactional
Kafka:-Operational

Consumer Mode:-
RabbitMQ :- Smart broker/dumb consumer
Kafka:-Dumb broker/smart consumer

Topology:-
RabbitMQ :- Exchange type: Direct, Fan out, Topic, Header-based
Kafka:-Publish/subscribe based

Payload Size:-
RabbitMQ :- No constraints
Kafka:-Default 1MB limit

Usage Cases:-
RabbitMQ :- No constraints
Kafka:-Default 1MB limit

-----------How Do They Handle Messaging?

Delivery Guarantee:-
RabbitMQ :- Especially in relation to transactions utilizing a single queue, it does not guarantee atomicity.
Kafka:-Only keeps order within a partition. Kafka ensures that every message in a partition either succeeds or fails.

Message ordering:-
RabbitMQ :- Unsupported
Kafka:-Message ordering is provided via its partitioning. By message key, messages are sent to topics.

Message priorities:-
RabbitMQ :- You can set message priorities in RabbitMQ and consume messages in the order of highest priority.
Kafka:-Unavailable


Message lifetime:-
RabbitMQ :- Because RabbitMQ is a queue, messages are discarded after being read,
 and an acknowledgment is given.
Kafka:-Since Kafka is a log, messages are kept on file by default. This can be 
controlled by defining a retention policy.




----------------------------Dispatcher Servlet---------------------
The DispatcherServlet is the front controller in Spring web applications. It's used to create 
web applications and REST services in Spring MVC. In a traditional Spring web application, 
this servlet is defined in the web.xml file.


we have to add the spring-boot-starter-web Maven dependency to our pom.xml file:

DispatcherServlet receives all of the HTTP requests and delegates them to controller classes.

Before the Servlet 3.x specification, DispatcherServlet would be registered in the web.xml file 
for a Spring MVC application. Since the Servlet 3.x specification, we can register servlets 
programmatically using ServletContainerInitializer.


But in case of spring-boot:-
Spring Boot provides the spring-boot-starter-web library for developing web applications using 
Spring MVC. One of the main features of Spring Boot is autoconfiguration. The Spring Boot 
autoconfiguration registers and configures the DispatcherServlet automatically. Therefore, 
we don’t need to register the DispatcherServlet manually.

By default, the spring-boot-starter-web starter configures DispatcherServlet to the URL pattern “/”. 
So, we don't need to complete any additional configuration for the above DispatcherServlet example 
in the web.xml file. However, we can customize the URL pattern using server.servlet.* in the 
application.properties file:

--------------------------------------------Microservices--------------------
The most significant benefit of using microservices is that it builds an application to collect 
small autonomous services developed for a business domain. So, if the business needs to change 
constantly, the development teams can rapidly build new apps components to meet the requirement.

Each microservice runs a unique process and communicates through a well-defined, lightweight mechanism, 
such as a container, to serve a business goal. It also makes an organization capable of evolving its technology stack.


Following are the three commonly used tools for Microservices:-
Wiremock
Docker
Hysrix


Advantage:-
Microservices provide great technology diversity. You can mix it easily with other frameworks, libraries, and databases.

Microservices support fault isolation as it collects small autonomous services or processes, so a process failure 
should not bring the whole system down.

It provides excellent support for the minor and parallel team.

It reduces the deployment time significantly.

Independent deployment


Disadvantage:-
The components in microservices always rely on each other, so; it requires communication between them in the application.

There are also a lot of challenges in deployment.

Testing and Debugging are very challenging.

It requires complete component automation and application maintenance.

It receives heavy operations overhead.

It requires skilled professionals to support heterogeneously distributed microservices.


---------------10) What are the main differences between Microservices and Monolithic Architecture?------

Microservices:-
The service startup is fast in Microservices.	
It is a loosely coupled architecture.	
In Microservices, if you make changes in a single data model, it does not affect others.	
It mainly focuses on products, not projects.	



Monolithic:-
The service startup takes time as it is slow in Monolithic Architecture.
It is primarily a tightly coupled architecture.
In Monolithic Architecture, any changes in the data model affect the entire database.
It mainly focuses on the whole project.



------------Caching-----------------------------------------
If we use Spring Boot, then we can utilize the spring-boot-starter-cache starter 
package to easily add the caching dependencies

To enable caching, Spring makes good use of annotations, much like enabling any 
other configuration level feature in the framework.

@Configuration
@EnableCaching

We can enable the caching feature simply by adding the @EnableCaching annotation 
to any of the configuration classes:

After we enable caching, for the minimal setup, we must register a cacheManager.

The simplest way to enable caching behavior for a method is to demarcate it with 
Cacheable, and parameterize it with the name of the cache where the results would be stored
@Cacheable("addresses")





















